[{"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\index.js":"1","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\App.js":"3","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\pages\\Signup.js":"4","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\pages\\Login.js":"5","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\pages\\Home.js":"6","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\pages\\Profile.js":"7","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\components\\Header\\index.js":"8","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\utils\\mutations.js":"9","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\utils\\queries.js":"10","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\utils\\auth.js":"11","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\components\\ProfileList\\index.js":"12","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\components\\PostingList\\index.js":"13","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\index.js":"14","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\reportWebVitals.js":"15","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\App.js":"16","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\pages\\Home.js":"17","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\pages\\Profile.js":"18","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\pages\\Signup.js":"19","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\pages\\Login.js":"20","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\components\\Header\\index.js":"21","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\utils\\auth.js":"22","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\utils\\queries.js":"23","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\utils\\mutations.js":"24","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\components\\ProfileList\\index.js":"25","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\pages\\Shoppage.js":"26","C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\components\\GameForm\\index.js":"27","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\index.js":"28","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\App.js":"29","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\reportWebVitals.js":"30","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\pages\\Home.js":"31","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\pages\\Login.js":"32","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\pages\\Shoppage.js":"33","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\pages\\Profile.js":"34","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\pages\\Signup.js":"35","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\components\\Header\\index.js":"36","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\utils\\queries.js":"37","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\utils\\mutations.js":"38","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\utils\\auth.js":"39","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\components\\ProfileList\\index.js":"40","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\pages\\Posting.js":"41","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\pages\\Updatepage.js":"42","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\components\\UpdateForm\\index.js":"43","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\components\\PostForm\\index.js":"44","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\components\\data.js":"45","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\components\\Footer\\index.js":"46"},{"size":500,"mtime":1635201047613,"results":"47","hashOfConfig":"48"},{"size":362,"mtime":1635201047616,"results":"49","hashOfConfig":"48"},{"size":1475,"mtime":1635719962223,"results":"50","hashOfConfig":"48"},{"size":3080,"mtime":1635719089185,"results":"51","hashOfConfig":"48"},{"size":2799,"mtime":1635717490310,"results":"52","hashOfConfig":"48"},{"size":684,"mtime":1635705897924,"results":"53","hashOfConfig":"48"},{"size":1840,"mtime":1635728432203,"results":"54","hashOfConfig":"48"},{"size":1405,"mtime":1635720062296,"results":"55","hashOfConfig":"48"},{"size":620,"mtime":1635725532702,"results":"56","hashOfConfig":"48"},{"size":1556,"mtime":1635727244300,"results":"57","hashOfConfig":"48"},{"size":720,"mtime":1635201047618,"results":"58","hashOfConfig":"48"},{"size":1542,"mtime":1635728358534,"results":"59","hashOfConfig":"48"},{"size":706,"mtime":1635727965365,"results":"60","hashOfConfig":"48"},{"size":500,"mtime":1635201047613,"results":"61","hashOfConfig":"62"},{"size":362,"mtime":1635201047616,"results":"63","hashOfConfig":"62"},{"size":1600,"mtime":1635785160170,"results":"64","hashOfConfig":"62"},{"size":687,"mtime":1635784858839,"results":"65","hashOfConfig":"62"},{"size":2021,"mtime":1635798410766,"results":"66","hashOfConfig":"62"},{"size":3080,"mtime":1635719089185,"results":"67","hashOfConfig":"62"},{"size":2799,"mtime":1635717490310,"results":"68","hashOfConfig":"62"},{"size":1507,"mtime":1635785263528,"results":"69","hashOfConfig":"62"},{"size":720,"mtime":1635201047618,"results":"70","hashOfConfig":"62"},{"size":1556,"mtime":1635727244300,"results":"71","hashOfConfig":"62"},{"size":1048,"mtime":1635786300475,"results":"72","hashOfConfig":"62"},{"size":1587,"mtime":1635796496186,"results":"73","hashOfConfig":"62"},{"size":932,"mtime":1635797287207,"results":"74","hashOfConfig":"62"},{"size":3133,"mtime":1635805329570,"results":"75","hashOfConfig":"62"},{"size":500,"mtime":1640041776602,"results":"76","hashOfConfig":"77"},{"size":1921,"mtime":1650926861590,"results":"78","hashOfConfig":"77"},{"size":362,"mtime":1635201047616,"results":"79","hashOfConfig":"77"},{"size":647,"mtime":1640041702528,"results":"80","hashOfConfig":"77"},{"size":3791,"mtime":1650922877842,"results":"81","hashOfConfig":"77"},{"size":20880,"mtime":1650927948574,"results":"82","hashOfConfig":"77"},{"size":20392,"mtime":1650926224033,"results":"83","hashOfConfig":"77"},{"size":3931,"mtime":1650922916118,"results":"84","hashOfConfig":"77"},{"size":3184,"mtime":1650927564932,"results":"85","hashOfConfig":"77"},{"size":1995,"mtime":1640134230942,"results":"86","hashOfConfig":"77"},{"size":3391,"mtime":1640134185277,"results":"87","hashOfConfig":"77"},{"size":720,"mtime":1640041756880,"results":"88","hashOfConfig":"77"},{"size":468,"mtime":1643582658261,"results":"89","hashOfConfig":"77"},{"size":24313,"mtime":1651520162879,"results":"90","hashOfConfig":"77"},{"size":726,"mtime":1649775087159,"results":"91","hashOfConfig":"77"},{"size":14434,"mtime":1643581490188,"results":"92","hashOfConfig":"77"},{"size":17990,"mtime":1650926787769,"results":"93","hashOfConfig":"77"},{"size":2996,"mtime":1649087992000,"results":"94","hashOfConfig":"77"},{"size":6278,"mtime":1650927768875,"results":"95","hashOfConfig":"77"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"ccrf5y",{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},"70cepf",{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},"wqrsfh",{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"155"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"155"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"155"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"155"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"155"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"155"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"155"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\index.js",[],["199","200"],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\App.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\pages\\Signup.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\pages\\Login.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\pages\\Home.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\pages\\Profile.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\components\\Header\\index.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\utils\\mutations.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\utils\\queries.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\utils\\auth.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\components\\ProfileList\\index.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2\\client\\src\\components\\PostingList\\index.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\index.js",[],["201","202"],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\App.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\pages\\Home.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\pages\\Profile.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\pages\\Signup.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\pages\\Login.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\components\\Header\\index.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\utils\\auth.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\utils\\queries.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\utils\\mutations.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\components\\ProfileList\\index.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\pages\\Shoppage.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\basic account setup for react\\acount-ver2.5\\client\\src\\components\\GameForm\\index.js",["203","204"],"import React, { useState } from 'react';\r\n// import { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\n\r\nimport { ADD_POSTING } from '../../utils/mutations';\r\nimport { QUERY_POSTINGS, QUERY_MYPROFILE } from '../../utils/queries';\r\n\r\nimport Auth from '../../utils/auth';\r\n\r\nconst GameForm = () => {\r\n\r\n    const [ newPosting, setNewPosting] = useState({\r\n        title: '',\r\n        publisher:'',\r\n        condition:'',\r\n        description:'',\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        setNewPosting({ ...newPosting, [event.target.name]: event.target.value})\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        try {\r\n            const { data } = await addPosting({\r\n                variables: {\r\n                    newPosting,\r\n                    postAuthor: Auth.getProfile.data.username,\r\n                },\r\n            });\r\n\r\n            setNewPosting('');\r\n        }   catch (err) {\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const [addPosting, {error}] = useMutation(ADD_POSTING, {\r\n        update(cache, { data: { addPosting } }) {\r\n            try {\r\n                const { postings } = cache.readQuery({ query: QUERY_POSTINGS });\r\n\r\n                cache.writeQuery({\r\n                    query: QUERY_POSTINGS,\r\n                    data: { postings: [addPosting, ...postings] },\r\n                });\r\n            }   catch (e) {\r\n                console.error(e);\r\n            }\r\n\r\n            const { myprofile } = cache.readQuery({ query: QUERY_MYPROFILE });\r\n            cache.writeQuery({\r\n                query: QUERY_MYPROFILE,\r\n                data: { myprofile: { ...myprofile, postings: [...myprofile.postings, addPosting] } },\r\n            });\r\n        },\r\n    });\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h1>New Posting</h1>\r\n            <form onSubmit={handleSubmit} className=\"gameform\">\r\n                <input\r\n                    name=\"title\"\r\n                    placeholder=\"Game Title\"\r\n                    // value={title}\r\n                    onChange={handleChange}>\r\n                </input>\r\n                <input\r\n                    name=\"publisher\"\r\n                    placeholder=\"Publisher\"\r\n                    // value={publisher}\r\n                    onChange={handleChange}>\r\n                </input>\r\n                <input\r\n                    name=\"condition\"\r\n                    placeholder=\"Condition\"\r\n                    // value={condition}\r\n                    onChange={handleChange}>\r\n                </input>\r\n                <textarea\r\n                    name=\"description\"\r\n                    placeholder=\"Description\"\r\n                    // value={description}\r\n                    onChange={handleChange}>\r\n                </textarea>\r\n\r\n                <div className=\"col-12 col-lg-3\">\r\n                    <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\r\n                        Add Posting\r\n                    </button>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GameForm;","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\index.js",[],["205","206"],"C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\App.js",["207"],"import React from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport Home from \"./pages/Home\";\nimport Shoppage from \"./pages/Shoppage\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Profile from \"./pages/Profile\";\nimport Posting from \"./pages/Posting\";\n\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n\nimport Box from \"@mui/material/Box\";\nimport Updatepage from \"./pages/Updatepage\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(\"id_token\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <Header />\n\n        <Box item sx={{ background: \"#E6EEF4\" }}>\n          <Route exact path=\"/\">\n            <Shoppage />\n          </Route>\n\n          <Route exact path=\"/login\">\n            <Login />\n          </Route>\n\n          <Route exact path=\"/signup\">\n            <Signup />\n          </Route>\n\n          <Route exact path=\"/myprofile\">\n            <Profile />\n          </Route>\n\n          <Route exact path=\"/shop/:postingId\">\n            <Posting />\n          </Route>\n\n          <Route exact path=\"/update/:postingId\">\n            <Updatepage />\n          </Route>\n        </Box>\n\n        <Footer />\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\pages\\Home.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\pages\\Login.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\pages\\Shoppage.js",["208","209","210","211","212"],"import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { QUERY_POSTINGS } from \"../utils/queries\";\r\nimport { REMOVE_POSTING } from \"../utils/mutations\";\r\n\r\n// Import Material UI components\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Collapse from \"@mui/material/Collapse\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Slider from \"@mui/material/Slider\";\r\n\r\nimport CachedOutlinedIcon from \"@mui/icons-material/CachedOutlined\";\r\nimport ArrowBackIosNewOutlinedIcon from \"@mui/icons-material/ArrowBackIosNewOutlined\";\r\nimport ArrowForwardIosOutlinedIcon from \"@mui/icons-material/ArrowForwardIosOutlined\";\r\n\r\nimport { Image, Transformation } from \"cloudinary-react\";\r\n\r\nimport * as dataList from \"../components/data\";\r\n\r\nconst Shoppage = () => {\r\n  const { loading, data } = useQuery(QUERY_POSTINGS);\r\n  const allPostings = data?.postings || [];\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [postings, setPostings] = useState(allPostings);\r\n  const [currentPostings, setCurrentPostings] = useState(allPostings);\r\n  let [pageIndex, setPageIndex] = useState(0);\r\n  let [min, setMin] = useState(0);\r\n  let [max, setMax] = useState(15);\r\n\r\n  useEffect(() => {\r\n    if (allPostings.length === 0) {\r\n      setIsLoading(true);\r\n    } else {\r\n      setCurrentPostings(allPostings);\r\n      setPostings(allPostings.slice(min, max));\r\n      setIsLoading(false);\r\n    }\r\n  }, [allPostings]);\r\n\r\n  // THIS SHOULD SHOW ONLY 15 POSTS AT A TIME\r\n  const ForBackListing = (direction) => {\r\n    if (direction === \"next\") {\r\n      min += 15;\r\n      max += 15;\r\n      pageIndex++;\r\n\r\n      setPostings(currentPostings.slice(min, max));\r\n      setMin(min);\r\n      setMax(max);\r\n      setPageIndex(pageIndex);\r\n    }\r\n    if (direction === \"previous\") {\r\n      min -= 15;\r\n      max -= 15;\r\n      pageIndex--;\r\n\r\n      setPostings(currentPostings.slice(min, max));\r\n      setMin(min);\r\n      setMax(max);\r\n      setPageIndex(pageIndex);\r\n    }\r\n  };\r\n\r\n  // const [removePosting] = useMutation(REMOVE_POSTING);\r\n\r\n  // const handleDelete = async (event) => {\r\n  //   let postingId = event.target.id;\r\n  //   console.log(postingId);\r\n\r\n  //   try {\r\n  //     await removePosting({\r\n  //       variables: { postingId },\r\n  //     });\r\n  //     console.log(\"Posting succesfully deleted\");\r\n  //   } catch (e) {\r\n  //     console.error(e);\r\n  //     console.log(`It didn't work`);\r\n  //   }\r\n  // };\r\n\r\n  const handleFilter = (key) => {\r\n    min = 0;\r\n    max = 15;\r\n    setMin(min);\r\n    setMax(max);\r\n    setPageIndex(0);\r\n    let filteredPost = allPostings.filter(\r\n      (posting) =>\r\n        posting.category === key ||\r\n        posting.condition === key ||\r\n        posting.platform === key ||\r\n        posting.publisher === key ||\r\n        posting.genre === key ||\r\n        posting.accessories === key ||\r\n        posting.officialCheck === key ||\r\n        posting.cardGame === key ||\r\n        posting.cardSale === key ||\r\n        posting.cardPublisher === key ||\r\n        posting.AFMakers === key ||\r\n        posting.figureManufacture === key\r\n    );\r\n    setPostings(filteredPost.slice(min, max));\r\n    setCurrentPostings(filteredPost);\r\n  };\r\n\r\n  const showAll = () => {\r\n    setPageIndex(0);\r\n    let currentListings = [];\r\n    for (let a = 0; a < 12; a++) {\r\n      currentListings.push(allPostings[a]);\r\n    }\r\n    setCurrentPostings(allPostings);\r\n    setPostings(currentListings);\r\n  };\r\n\r\n  // NEW CODE\r\n  const [categoryFilter, setCategoryFilter] = useState(true);\r\n  const [platformFilter, setPlatformFilter] = useState(false);\r\n  const [accessoryFilter, setAccessoryFilter] = useState(false);\r\n  const [genreFilter, setGenreFilter] = useState(false);\r\n  const [cardgameFilter, setCardgameFilter] = useState(false);\r\n  const [AFFilter, setAFFilter] = useState(false);\r\n  const [FMFIlter, setFMFilter] = useState(false);\r\n\r\n  const showFilters = (key) => {\r\n    if (key === \"category\") {\r\n      setCategoryFilter(!categoryFilter);\r\n    }\r\n    if (key === \"system\") {\r\n      setPlatformFilter(!platformFilter);\r\n    }\r\n    if (key === \"accessories\") {\r\n      setAccessoryFilter(!accessoryFilter);\r\n    }\r\n    if (key === \"genre\") {\r\n      setGenreFilter(!genreFilter);\r\n    }\r\n    if (key === \"cardGame\") {\r\n      setCardgameFilter(!cardgameFilter);\r\n    }\r\n    if (key === \"AF\") {\r\n      setAFFilter(!AFFilter);\r\n    }\r\n    if (key === \"FM\") {\r\n      setFMFilter(!FMFIlter);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Grid\r\n        item\r\n        sx={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <Paper\r\n          square\r\n          elevation={18}\r\n          sx={{\r\n            display: \"flex\",\r\n            width: \"70%\",\r\n            height: \"1732px\",\r\n            mt: \"75px\",\r\n            mb: \"75px\",\r\n          }}\r\n        >\r\n          <Grid\r\n            item\r\n            sx={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              width: \"25%\",\r\n              borderStyle: \"solid\",\r\n              borderWidth: \"thin\",\r\n              borderColor: \"#C0C0C0\",\r\n            }}\r\n          >\r\n            <Grid\r\n              item\r\n              sx={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\",\r\n                p: \"10px\",\r\n                borderBottom: \"solid\",\r\n                borderWidth: \"thin\",\r\n                borderColor: \"#C0C0C0\",\r\n              }}\r\n            >\r\n              <Grid>\r\n                <h2 style={{ fontFamily: \"Bebas Neue\" }}>Filter</h2>\r\n              </Grid>\r\n              <Grid onClick={showAll}>\r\n                <CachedOutlinedIcon style={{ cursor: \"pointer\" }} />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item sx={{ overflowY: \"auto\" }}>\r\n              <Grid sx={{ p: \"10px\" }}>\r\n                <Grid onClick={() => showFilters(\"category\")}>\r\n                  <h3 style={{ cursor: \"pointer\", fontFamily: \"Bebas Neue\" }}>\r\n                    Category\r\n                  </h3>\r\n                </Grid>\r\n                <Collapse in={categoryFilter}>\r\n                  <Grid sx={{ mt: \"10px\" }}>\r\n                    {dataList.category.map((category) => (\r\n                      <Grid\r\n                        key={category}\r\n                        onClick={() => handleFilter(category)}\r\n                        sx={{ mb: \"7px\" }}\r\n                      >\r\n                        <p\r\n                          style={{\r\n                            cursor: \"pointer\",\r\n                            fontFamily: \"Roboto Condensed\",\r\n                          }}\r\n                        >\r\n                          {category}\r\n                        </p>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </Collapse>\r\n              </Grid>\r\n              <hr />\r\n              <Grid sx={{ p: \"10px\" }}>\r\n                <Grid>\r\n                  <Grid item>\r\n                    <h3>Price</h3>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    sx={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"space-between\",\r\n                      mt: \"20px\",\r\n                      ml: \"20px\",\r\n                      mr: \"20px\",\r\n                    }}\r\n                  >\r\n                    <TextField sx={{ width: \"125px\" }} size=\"small\" />\r\n                    <TextField sx={{ width: \"125px\" }} size=\"small\" />\r\n                  </Grid>\r\n                  <Grid item sx={{ mt: \"20px\", ml: \"30px\", mr: \"30px\" }}>\r\n                    <Slider />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <hr />\r\n              <Grid sx={{ p: \"10px\" }}>\r\n                <Grid onClick={() => showFilters(\"system\")}>\r\n                  <h3 style={{ cursor: \"pointer\", fontFamily: \"Bebas Neue\" }}>\r\n                    System\r\n                  </h3>\r\n                </Grid>\r\n                <Collapse in={platformFilter}>\r\n                  <Grid sx={{ mt: \"10px\" }}>\r\n                    {dataList.platform.map((platform) => (\r\n                      <Grid\r\n                        key={platform}\r\n                        onClick={() => handleFilter(platform)}\r\n                        sx={{ mb: \"7px\" }}\r\n                      >\r\n                        <p\r\n                          style={{\r\n                            cursor: \"pointer\",\r\n                            fontFamily: \"Roboto Condensed\",\r\n                          }}\r\n                        >\r\n                          {platform}\r\n                        </p>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </Collapse>\r\n              </Grid>\r\n              <hr />\r\n              <Grid sx={{ p: \"10px\" }}>\r\n                <Grid onClick={() => showFilters(\"accessories\")}>\r\n                  <h3 style={{ cursor: \"pointer\", fontFamily: \"Bebas Neue\" }}>\r\n                    Accessories\r\n                  </h3>\r\n                </Grid>\r\n                <Collapse in={accessoryFilter}>\r\n                  <Grid sx={{ mt: \"10px\" }}>\r\n                    {dataList.accessories.map((accessory) => (\r\n                      <div\r\n                        key={accessory}\r\n                        onClick={() => handleFilter(accessory)}\r\n                      >\r\n                        <p\r\n                          style={{\r\n                            cursor: \"pointer\",\r\n                            fontFamily: \"Roboto Condensed\",\r\n                          }}\r\n                        >\r\n                          {accessory}\r\n                        </p>\r\n                      </div>\r\n                    ))}\r\n                  </Grid>\r\n                </Collapse>\r\n              </Grid>\r\n              <hr />\r\n              <Grid sx={{ p: \"10px\" }}>\r\n                <Grid onClick={() => showFilters(\"genre\")}>\r\n                  <h3 style={{ cursor: \"pointer\", fontFamily: \"Bebas Neue\" }}>\r\n                    Genre\r\n                  </h3>\r\n                </Grid>\r\n                <Collapse in={genreFilter}>\r\n                  <Grid sx={{ mt: \"10px\" }}>\r\n                    {dataList.genre.map((genre) => (\r\n                      <Grid\r\n                        key={genre}\r\n                        onClick={() => handleFilter(genre)}\r\n                        sx={{ mb: \"7px\" }}\r\n                      >\r\n                        <p\r\n                          style={{\r\n                            cursor: \"pointer\",\r\n                            fontFamily: \"Roboto Condensed\",\r\n                          }}\r\n                        >\r\n                          {genre}\r\n                        </p>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </Collapse>\r\n              </Grid>\r\n              <hr />\r\n              <Grid sx={{ p: \"10px\" }}>\r\n                <Grid onClick={() => showFilters(\"cardGame\")}>\r\n                  <h3 style={{ cursor: \"pointer\", fontFamily: \"Bebas Neue\" }}>\r\n                    Card Games\r\n                  </h3>\r\n                </Grid>\r\n                <Collapse in={cardgameFilter}>\r\n                  <Grid sx={{ mt: \"10px\" }}>\r\n                    {dataList.cardGames.map((games) => (\r\n                      <Grid\r\n                        key={games}\r\n                        onClick={() => handleFilter(games)}\r\n                        sx={{ mb: \"7px\" }}\r\n                      >\r\n                        <p\r\n                          style={{\r\n                            cursor: \"pointer\",\r\n                            fontFamily: \"Roboto Condensed\",\r\n                          }}\r\n                        >\r\n                          {games}\r\n                        </p>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </Collapse>\r\n              </Grid>\r\n              <hr />\r\n              <Grid sx={{ p: \"10px\" }}>\r\n                <Grid onClick={() => showFilters(\"AF\")}>\r\n                  <h3 style={{ cursor: \"pointer\", fontFamily: \"Bebas Neue\" }}>\r\n                    Action Figure Maker\r\n                  </h3>\r\n                </Grid>\r\n                <Collapse in={AFFilter}>\r\n                  <Grid sx={{ mt: \"10px\" }}>\r\n                    {dataList.AFMakers.map((maker) => (\r\n                      <Grid\r\n                        key={maker}\r\n                        onClick={() => handleFilter(maker)}\r\n                        sx={{ mb: \"7px\" }}\r\n                      >\r\n                        <p\r\n                          style={{\r\n                            cursor: \"pointer\",\r\n                            fontFamily: \"Roboto Condensed\",\r\n                          }}\r\n                        >\r\n                          {maker}\r\n                        </p>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </Collapse>\r\n              </Grid>\r\n              <hr />\r\n              <Grid sx={{ p: \"10px\" }}>\r\n                <Grid onClick={() => showFilters(\"FM\")}>\r\n                  <h3 style={{ cursor: \"pointer\", fontFamily: \"Bebas Neue\" }}>\r\n                    Figurine Maker\r\n                  </h3>\r\n                </Grid>\r\n                <Collapse in={FMFIlter}>\r\n                  <Grid sx={{ mt: \"10px\" }}>\r\n                    {dataList.figurineMaker.map((maker) => (\r\n                      <Grid\r\n                        key={maker}\r\n                        onClick={() => handleFilter(maker)}\r\n                        sx={{ mb: \"7px\" }}\r\n                      >\r\n                        <p\r\n                          style={{\r\n                            cursor: \"pointer\",\r\n                            fontFamily: \"Roboto Condensed\",\r\n                          }}\r\n                        >\r\n                          {maker}\r\n                        </p>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </Collapse>\r\n              </Grid>\r\n              <hr />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid\r\n            item\r\n            sx={{\r\n              width: \"75%\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              justifyContent: \"space-between\",\r\n            }}\r\n          >\r\n            <Grid>\r\n              <Grid\r\n                item\r\n                sx={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-between\",\r\n                  p: \"10px\",\r\n                  borderStyle: \"solid\",\r\n                  borderWidth: \"thin\",\r\n                  borderColor: \"#C0C0C0\",\r\n                }}\r\n              >\r\n                {pageIndex === 0 ? (\r\n                  <Grid>\r\n                    <ArrowBackIosNewOutlinedIcon />\r\n                  </Grid>\r\n                ) : (\r\n                  <Grid onClick={() => ForBackListing(\"previous\")}>\r\n                    <ArrowBackIosNewOutlinedIcon\r\n                      style={{\r\n                        cursor: \"pointer\",\r\n                        fontFamily: \"Roboto Condensed\",\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                )}\r\n                {pageIndex === Math.ceil(currentPostings.length / 15) - 1 ? (\r\n                  <Grid>\r\n                    <ArrowForwardIosOutlinedIcon />\r\n                  </Grid>\r\n                ) : (\r\n                  <Grid onClick={() => ForBackListing(\"next\")}>\r\n                    <ArrowForwardIosOutlinedIcon\r\n                      style={{\r\n                        cursor: \"pointer\",\r\n                        fontFamily: \"Roboto Condensed\",\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                )}\r\n              </Grid>\r\n\r\n              {isLoading ? (\r\n                <Grid\r\n                  item\r\n                  sx={{ display: \"flex\", justifyContent: \"center\", mt: \"50px\" }}\r\n                >\r\n                  <h1>Loading...</h1>\r\n                </Grid>\r\n              ) : (\r\n                <Grid\r\n                  item\r\n                  sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    flexWrap: \"wrap\",\r\n                  }}\r\n                >\r\n                  {postings.map((posting) => (\r\n                    <Grid\r\n                      key={posting._id}\r\n                      sx={{\r\n                        width: \"33.33%\",\r\n                        borderStyle: \"solid\",\r\n                        borderWidth: \"thin\",\r\n                        borderColor: \"#C0C0C0\",\r\n                        height: \"326.4px\",\r\n                        background: \"white\",\r\n                      }}\r\n                    >\r\n                      {(function () {\r\n                        if (\r\n                          posting.imageid === null ||\r\n                          posting.imageid === \"N/A\"\r\n                        ) {\r\n                          return (\r\n                            <Grid item sx={{ p: \"10px\", height: \"220px\" }}>\r\n                              <Image\r\n                                width=\"100%\"\r\n                                height=\"100%\"\r\n                                cloudName=\"du119g90a\"\r\n                                public_id=\"noimagegame_uvzgky\"\r\n                              />\r\n                            </Grid>\r\n                          );\r\n                        } else {\r\n                          return (\r\n                            <Grid\r\n                              item\r\n                              sx={{\r\n                                p: \"10px\",\r\n                                height: \"220px\",\r\n                              }}\r\n                            >\r\n                              <Image\r\n                                width=\"100%\"\r\n                                height=\"100%\"\r\n                                cloudName=\"du119g90a\"\r\n                                public_id={posting.imageid}\r\n                              >\r\n                                <Transformation\r\n                                  height=\"1080\"\r\n                                  width=\"1920\"\r\n                                  crop=\"pad\"\r\n                                />\r\n                              </Image>\r\n                            </Grid>\r\n                          );\r\n                        }\r\n                      })()}\r\n\r\n                      <Grid\r\n                        item\r\n                        sx={{\r\n                          p: \"15px\",\r\n                          pl: \"30px\",\r\n                          pr: \"30px\",\r\n                          display: \"flex\",\r\n                          flexDirection: \"column\",\r\n                          justifyContent: \"space-between\",\r\n                          height: \"32.5%\",\r\n                        }}\r\n                      >\r\n                        <h4 style={{ fontFamily: \"Roboto Condensed\" }}>\r\n                          {posting.title}\r\n                        </h4>\r\n                        <h4 style={{ fontFamily: \"Roboto Condensed\" }}>\r\n                          Price:{\" \"}\r\n                        </h4>\r\n                      </Grid>\r\n                    </Grid>\r\n                  ))}\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n\r\n            <Grid\r\n              item\r\n              sx={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"space-between\",\r\n                p: \"10px\",\r\n                borderStyle: \"solid\",\r\n                borderWidth: \"thin\",\r\n                borderColor: \"#C0C0C0\",\r\n              }}\r\n            >\r\n              {pageIndex === 0 ? (\r\n                <Grid>\r\n                  <ArrowBackIosNewOutlinedIcon />\r\n                </Grid>\r\n              ) : (\r\n                <Grid onClick={() => ForBackListing(\"previous\")}>\r\n                  <ArrowBackIosNewOutlinedIcon style={{ cursor: \"pointer\" }} />\r\n                </Grid>\r\n              )}\r\n              {pageIndex === Math.ceil(currentPostings.length / 15) - 1 ? (\r\n                <Grid>\r\n                  <ArrowForwardIosOutlinedIcon />\r\n                </Grid>\r\n              ) : (\r\n                <Grid onClick={() => ForBackListing(\"next\")}>\r\n                  <ArrowForwardIosOutlinedIcon style={{ cursor: \"pointer\" }} />\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Shoppage;\r\n","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\pages\\Profile.js",["213","214","215"],"import React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport PostForm from \"../components/PostForm\";\r\n\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { QUERY_SINGLE_USER } from \"../utils/queries\";\r\nimport { QUERY_MYPROFILE } from \"../utils/queries\";\r\nimport { REMOVE_POSTING } from \"../utils/mutations\";\r\n\r\n// Import Material UI components\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Card from \"@mui/material/Card\";\r\nimport Tabs from \"@mui/material/Tabs\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nimport Auth from \"../utils/auth\";\r\n\r\nimport { Image, Transformation } from \"cloudinary-react\";\r\n\r\nconst Profile = () => {\r\n  const { userId } = useParams();\r\n  const { loading, data } = useQuery(\r\n    userId ? QUERY_SINGLE_USER : QUERY_MYPROFILE,\r\n    {\r\n      variables: { userId: userId },\r\n    }\r\n  );\r\n  const user = data?.myprofile || data?.user || [];\r\n  const allUserPostings = data?.myprofile.postings || data?.user || [];\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [postings, setPostings] = useState(allUserPostings);\r\n  let [pageIndex, setPageIndex] = useState(0);\r\n  let [min, setMin] = useState(0);\r\n  let [max, setMax] = useState(6);\r\n\r\n  useEffect(() => {\r\n    setPostings(allUserPostings.slice(min, max));\r\n    setIsLoading(false);\r\n  }, [allUserPostings]);\r\n\r\n  // THIS SHOWS ONLY 6 LISTINGS PER PAGE\r\n  const ForBackListing = (direction) => {\r\n    if (direction === \"next\") {\r\n      min += 6;\r\n      max += 5;\r\n      pageIndex++;\r\n\r\n      setPostings(allUserPostings.slice(min, max));\r\n      setMin(min);\r\n      setMax(max);\r\n      setPageIndex(pageIndex);\r\n    }\r\n    if (direction === \"previous\") {\r\n      min -= 6;\r\n      max -= 5;\r\n      pageIndex--;\r\n\r\n      setPostings(allUserPostings.slice(min, max));\r\n      setMin(min);\r\n      setMax(max);\r\n      setPageIndex(pageIndex);\r\n    }\r\n  };\r\n\r\n  // THESE ARE FOR THE TABS\r\n  const [profileTab, setProfileTab] = useState(0);\r\n\r\n  const hanldeProfileTabChange = (event, newValue) => {\r\n    setProfileTab(newValue);\r\n  };\r\n\r\n  function TabPanel(props) {\r\n    const { children, value, index } = props;\r\n    return <Box>{value === index && <div>{children}</div>}</Box>;\r\n  }\r\n\r\n  // THIS SHOULD BE ABLE DELETE POSTING THE USER MADE\r\n  const [removePosting] = useMutation(REMOVE_POSTING);\r\n\r\n  const handleDelete = async (event) => {\r\n    let postingId = event.target.id;\r\n    try {\r\n      removePosting({\r\n        variables: { postingId },\r\n      });\r\n      console.log(\"Posting succesfully deleted\");\r\n    } catch (e) {\r\n      console.error(e);\r\n      console.log(`It didn't work`);\r\n    }\r\n  };\r\n\r\n  if (Auth.loggedIn() && Auth.getProfile().data._id === userId) {\r\n    return <Redirect to=\"/myprofile\" />;\r\n  }\r\n\r\n  if (!user?.username) {\r\n    return (\r\n      <Grid item sx={{ height: \"100vh\" }}>\r\n        <Grid\r\n          item\r\n          sx={{ display: \"flex\", justifyContent: \"center\", pt: \"115px\" }}\r\n        >\r\n          <h2>\r\n            You need to be logged in to see your profile page. Use the\r\n            navigation links above to sign up or log in!\r\n          </h2>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\r\n      <Paper elevation={8} sx={{ width: \"70%\", mt: \"75px\", mb: \"75px\" }}>\r\n        <Grid\r\n          item\r\n          sx={{\r\n            mb: \"10px\",\r\n          }}\r\n        >\r\n          <Tabs value={profileTab} onChange={hanldeProfileTabChange}>\r\n            <Tab label=\"Your Listings\" />\r\n            <Tab label=\"Create New Posting\" />\r\n            {/* <Tab label=\"Update Account\" /> */}\r\n          </Tabs>\r\n        </Grid>\r\n\r\n        <TabPanel value={profileTab} index={0}>\r\n          <Grid\r\n            item\r\n            sx={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              height: \"1150px\",\r\n            }}\r\n          >\r\n            <Grid\r\n              item\r\n              sx={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                // justifyContent: \"space-between\",\r\n                width: \"70%\",\r\n                m: \"15px\",\r\n                ml: \"25px\",\r\n                mb: \"14px\",\r\n                p: \"15px\",\r\n                background: \"rgb(134, 134, 134, 0.2)\",\r\n              }}\r\n            >\r\n              <Grid\r\n                item\r\n                sx={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"row\",\r\n                  justifyContent: \"space-between\",\r\n                }}\r\n              >\r\n                {pageIndex === 0 ? (\r\n                  <Button variant=\"contained\">Previous</Button>\r\n                ) : (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => ForBackListing(\"previous\")}\r\n                  >\r\n                    Previous\r\n                  </Button>\r\n                )}\r\n                {pageIndex === Math.ceil(allUserPostings.length / 6) - 1 ? (\r\n                  <Button variant=\"contained\">Next</Button>\r\n                ) : (\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => ForBackListing(\"next\")}\r\n                  >\r\n                    Next\r\n                  </Button>\r\n                )}\r\n              </Grid>\r\n\r\n              {postings.length === 0 ? (\r\n                <Grid\r\n                  item\r\n                  sx={{ display: \"flex\", justifyContent: \"center\", pt: \"30px\" }}\r\n                >\r\n                  <h3>You have no postings...</h3>\r\n                </Grid>\r\n              ) : (\r\n                <Grid\r\n                  item\r\n                  sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    justifyContent: \"flex-start\",\r\n                  }}\r\n                >\r\n                  {postings.map((posting) => (\r\n                    <Card\r\n                      square\r\n                      key={posting._id}\r\n                      elevation={5}\r\n                      sx={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"row\",\r\n                        justifyContent: \"space-between\",\r\n                        mt: \"17px\",\r\n                        borderStyle: \"solid\",\r\n                        borderColor: \"rgb(64, 64, 64, .7)\",\r\n                      }}\r\n                    >\r\n                      <Link\r\n                        to={`/shop/${posting._id}`}\r\n                        style={{ textDecoration: \"none\" }}\r\n                        sx={{ display: \"flex\", flexDirection: \"row\" }}\r\n                      >\r\n                        <Grid\r\n                          item\r\n                          sx={{ display: \"flex\", flexDirection: \"row\" }}\r\n                        >\r\n                          <Grid\r\n                            item\r\n                            sx={{\r\n                              borderRightStyle: \"solid\",\r\n                              borderColor: \"rgb(64, 64, 64, .7)\",\r\n                            }}\r\n                          >\r\n                            {(function () {\r\n                              if (\r\n                                posting.imageid === null ||\r\n                                posting.imageid === \"N/A\"\r\n                              ) {\r\n                                return (\r\n                                  <Image\r\n                                    cloudName=\"du119g90a\"\r\n                                    public_id=\"noimagegame_uvzgky\"\r\n                                  >\r\n                                    <Transformation\r\n                                      width=\"200\"\r\n                                      height=\"150\"\r\n                                      crop=\"pad\"\r\n                                    />\r\n                                  </Image>\r\n                                );\r\n                              } else {\r\n                                return (\r\n                                  <Image\r\n                                    width=\"100%\"\r\n                                    height=\"100%\"\r\n                                    cloudName=\"du119g90a\"\r\n                                    public_id={posting.imageid}\r\n                                  >\r\n                                    <Transformation\r\n                                      width=\"200\"\r\n                                      height=\"150\"\r\n                                      crop=\"pad\"\r\n                                    />\r\n                                  </Image>\r\n                                );\r\n                              }\r\n                            })()}\r\n                          </Grid>\r\n\r\n                          <Grid\r\n                            item\r\n                            sx={{\r\n                              display: \"flex\",\r\n                              flexDirection: \"column\",\r\n                              p: \"5px\",\r\n                            }}\r\n                          >\r\n                            <Grid\r\n                              style={{\r\n                                fontFamily: \"Roboto Condensed\",\r\n                                color: \"black\",\r\n                              }}\r\n                            >\r\n                              <h2>{posting.title}</h2>\r\n                              <h5>Date: {posting.createdAt}</h5>\r\n                            </Grid>\r\n                            <br />\r\n                            {(function () {\r\n                              if (posting.category === \"Console\") {\r\n                                return (\r\n                                  <Grid\r\n                                    item\r\n                                    sx={{\r\n                                      display: \"flex\",\r\n                                      flexDirection: \"row\",\r\n                                    }}\r\n                                    style={{\r\n                                      fontFamily: \"Roboto Condensed\",\r\n                                      color: \"black\",\r\n                                    }}\r\n                                  >\r\n                                    <Grid item sx={{ pr: \"30px\" }}>\r\n                                      <p>Category: {posting.category}</p>\r\n                                      <p>Platform: {posting.platform}</p>\r\n                                      <p>Platform: {posting.publisher}</p>\r\n                                    </Grid>\r\n                                    <Grid>\r\n                                      <p>Condition: {posting.condition}</p>\r\n                                    </Grid>\r\n                                  </Grid>\r\n                                );\r\n                              } else if (posting.category === \"Games\") {\r\n                                return (\r\n                                  <Grid\r\n                                    item\r\n                                    sx={{\r\n                                      display: \"flex\",\r\n                                      flexDirection: \"row\",\r\n                                    }}\r\n                                    style={{\r\n                                      fontFamily: \"Roboto Condensed\",\r\n                                      color: \"black\",\r\n                                    }}\r\n                                  >\r\n                                    <Grid item sx={{ pr: \"30px\" }}>\r\n                                      <p>Category: {posting.category}</p>\r\n                                      <p>Platform: {posting.platform}</p>\r\n                                      <p>Publisher: {posting.publisher}</p>\r\n                                    </Grid>\r\n                                    <Grid>\r\n                                      <p>Genre: {posting.genre}</p>\r\n                                      <p>Condition: {posting.condition}</p>\r\n                                    </Grid>\r\n                                  </Grid>\r\n                                );\r\n                              } else if (posting.category === \"Accessories\") {\r\n                                return (\r\n                                  <Grid\r\n                                    item\r\n                                    sx={{\r\n                                      display: \"flex\",\r\n                                      flexDirection: \"row\",\r\n                                    }}\r\n                                    style={{\r\n                                      fontFamily: \"Roboto Condensed\",\r\n                                      color: \"black\",\r\n                                    }}\r\n                                  >\r\n                                    <Grid item sx={{ pr: \"30px\" }}>\r\n                                      <p>Category: {posting.category}</p>\r\n                                      <p>Platform: {posting.platform}</p>\r\n                                      <p>Accessory: {posting.accessory}</p>\r\n                                    </Grid>\r\n                                    <Grid>\r\n                                      <p>\r\n                                        First/Third: {posting.accessoryCheck}\r\n                                      </p>\r\n                                      <p>Condition: {posting.condition}</p>\r\n                                    </Grid>\r\n                                  </Grid>\r\n                                );\r\n                              } else if (\r\n                                posting.category === \"Action Figures\"\r\n                              ) {\r\n                                return (\r\n                                  <Grid\r\n                                    style={{\r\n                                      fontFamily: \"Roboto Condensed\",\r\n                                      color: \"black\",\r\n                                    }}\r\n                                  >\r\n                                    <p>Category: {posting.category}</p>\r\n                                    <p>Category: {posting.figureManufacture}</p>\r\n                                    <p>Condition: {posting.condition}</p>\r\n                                  </Grid>\r\n                                );\r\n                              } else if (\r\n                                posting.category === \"Trading Card Game\"\r\n                              ) {\r\n                                return (\r\n                                  <Grid\r\n                                    item\r\n                                    sx={{\r\n                                      display: \"flex\",\r\n                                      flexDirection: \"row\",\r\n                                    }}\r\n                                    style={{\r\n                                      fontFamily: \"Roboto Condensed\",\r\n                                      color: \"black\",\r\n                                    }}\r\n                                  >\r\n                                    <Grid item sx={{ pr: \"30px\" }}>\r\n                                      <p>Category: {posting.category}</p>\r\n                                      <p>Single/Booster: {posting.cardSale}</p>\r\n                                      <p>Publisher: {posting.publisher}</p>\r\n                                    </Grid>\r\n                                    <Grid>\r\n                                      <p>Condition: {posting.condition}</p>\r\n                                    </Grid>\r\n                                  </Grid>\r\n                                );\r\n                              } else if (posting.category === \"Board Game\") {\r\n                                return (\r\n                                  <Grid\r\n                                    style={{\r\n                                      fontFamily: \"Roboto Condensed\",\r\n                                      color: \"black\",\r\n                                    }}\r\n                                  >\r\n                                    <p>Category: {posting.category}</p>\r\n                                    <p>Condition: {posting.condition}</p>\r\n                                  </Grid>\r\n                                );\r\n                              } else if (posting.category === \"Figurines\") {\r\n                                return (\r\n                                  <Grid\r\n                                    style={{\r\n                                      fontFamily: \"Roboto Condensed\",\r\n                                      color: \"black\",\r\n                                    }}\r\n                                  >\r\n                                    <p>Category: {posting.category}</p>\r\n                                    <p>\r\n                                      Manufacture: {posting.figurineManufacture}\r\n                                    </p>\r\n                                    <p>Condition: {posting.condition}</p>\r\n                                  </Grid>\r\n                                );\r\n                              }\r\n                            })()}\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Link>\r\n                      <Grid\r\n                        item\r\n                        sx={{ display: \"flex\", flexDirection: \"column\" }}\r\n                      >\r\n                        <Button id={posting._id} onClick={handleDelete}>\r\n                          Delete\r\n                        </Button>\r\n                        <Button>\r\n                          <Link to={`/update/${posting._id}`}>Update</Link>\r\n                        </Button>\r\n                      </Grid>\r\n                    </Card>\r\n                  ))}\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n\r\n            <Paper\r\n              elevation={5}\r\n              sx={{\r\n                width: \"30%\",\r\n                m: \"15px\",\r\n                mr: \"45px\",\r\n                mb: \"30px\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\",\r\n                height: \"400px\",\r\n              }}\r\n              style={{ fontFamily: \"Roboto Condensed\" }}\r\n            >\r\n              <Grid\r\n                item\r\n                sx={{\r\n                  pt: \"5px\",\r\n                  pb: \"5px\",\r\n                  background: \"#59BD59\",\r\n                  width: \"100%\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  borderTopRightRadius: \"5px\",\r\n                  borderTopLeftRadius: \"5px\",\r\n                  mb: \"15px\",\r\n                }}\r\n              >\r\n                <h2>Statistics</h2>\r\n              </Grid>\r\n              <Grid item sx={{ mb: \"10px\" }}>\r\n                <h2>Your Listings</h2>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                sx={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  alignItems: \"center\",\r\n                  mb: \"15px\",\r\n                }}\r\n              >\r\n                <p>All Listings</p>\r\n                <p>Currently Selling</p>\r\n                <p>Sold Listings</p>\r\n              </Grid>\r\n              <Grid item sx={{ mb: \"10px\" }}>\r\n                <h2>Category</h2>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                sx={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  alignItems: \"center\",\r\n                  mb: \"15px\",\r\n                }}\r\n              >\r\n                <p>Acessories</p>\r\n                <p>Consoles</p>\r\n                <p>Games</p>\r\n                <p>Action Figures</p>\r\n                <p>Figurines</p>\r\n                <p>Trading Cards</p>\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n        </TabPanel>\r\n\r\n        <TabPanel value={profileTab} index={1}>\r\n          <Grid item sx={{ height: \"1150px\" }}>\r\n            <PostForm />\r\n          </Grid>\r\n        </TabPanel>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\pages\\Signup.js",["216"],"import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { ADD_USER } from \"../utils/mutations\";\r\n\r\nimport Auth from \"../utils/auth\";\r\n\r\nconst Signup = () => {\r\n  const [formState, setFormState] = useState({\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [addUser, { error, data }] = useMutation(ADD_USER);\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(formState);\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...formState },\r\n      });\r\n\r\n      Auth.login(data.addUser.token);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\r\n      <Paper\r\n        elevation={5}\r\n        sx={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n          width: \"20%\",\r\n          p: \"10px\",\r\n          height: \"650px\",\r\n          mt: \"75px\",\r\n          mb: \"75px\",\r\n        }}\r\n      >\r\n        <Grid item sx={{ mt: \"50px\", mb: \"50px\" }}>\r\n          <h1 style={{ fontFamily: \"Roboto Condensed\" }}>Sign Up</h1>\r\n        </Grid>\r\n        <Grid>\r\n          {data ? (\r\n            <p>\r\n              Success! You may now head{\" \"}\r\n              <Link to=\"/\">back to the homepage.</Link>\r\n            </p>\r\n          ) : (\r\n            <form onSubmit={handleSubmit}>\r\n              <Grid\r\n                item\r\n                sx={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <TextField\r\n                  placeholder=\"Your username\"\r\n                  size=\"small\"\r\n                  name=\"username\"\r\n                  type=\"text\"\r\n                  value={formState.username}\r\n                  onChange={handleChange}\r\n                  sx={{ width: \"325px\", mb: \"20px\" }}\r\n                />\r\n                <TextField\r\n                  placeholder=\"Your email\"\r\n                  size=\"small\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  value={formState.email}\r\n                  onChange={handleChange}\r\n                  sx={{ width: \"325px\", mb: \"20px\" }}\r\n                />\r\n                <TextField\r\n                  placeholder=\"********\"\r\n                  size=\"small\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  value={formState.password}\r\n                  onChange={handleChange}\r\n                  sx={{ width: \"325px\", mb: \"50px\" }}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  type=\"submit\"\r\n                  sx={{ width: \"325px\", mb: \"150px\" }}\r\n                >\r\n                  Submit\r\n                </Button>\r\n                <Grid\r\n                  item\r\n                  sx={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    alignItems: \"center\",\r\n                    mb: \"25px\",\r\n                  }}\r\n                >\r\n                  <h5>Already a Member?</h5>\r\n                  <h5>\r\n                    <Link to=\"/login\">Log in here!!</Link>\r\n                  </h5>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          )}\r\n        </Grid>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\components\\Header\\index.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\utils\\queries.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\utils\\mutations.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\utils\\auth.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\components\\ProfileList\\index.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\pages\\Posting.js",["217","218","219","220"],"C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\pages\\Updatepage.js",[],"C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\components\\UpdateForm\\index.js",["221"],"import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { UPDATE_POSTING } from \"../../utils/mutations\";\r\n\r\n// Import Material UI components\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\n\r\nimport * as dataList from \"../data\";\r\n\r\nconst UpdateForm = (props) => {\r\n  // console.log(\"props.posting\");\r\n  // console.log(props.posting);\r\n\r\n  const [updatedPosting, setUpdatePosting] = useState({\r\n    title: \"N/A\",\r\n    category: \"N/A\",\r\n    platform: \"N/A\",\r\n    publisher: \"N/A\",\r\n    genre: \"N/A\",\r\n    condition: \"N/A\",\r\n    accessory: \"N/A\",\r\n    accessoryCheck: \"N/A\",\r\n    cardGame: \"N/A\",\r\n    cardSale: \"N/A\",\r\n    figurineManufacture: \"N/A\",\r\n    figureManufacture: \"N/A\",\r\n    description: \"N/A\",\r\n    imageid: \"N/A\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    setUpdatePosting({ ...props.posting });\r\n  }, [props.posting]);\r\n\r\n  const handleUpdate = (event) => {\r\n    setUpdatePosting({\r\n      ...updatedPosting,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  console.log(\"updatedposting\");\r\n  console.log(updatedPosting);\r\n\r\n  const [updatePosting] = useMutation(UPDATE_POSTING);\r\n\r\n  const confirmUpdate = async (event) => {\r\n    let postingId = updatedPosting._id;\r\n\r\n    try {\r\n      updatePosting({\r\n        variables: { postingId, ...updatedPosting },\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Grid>\r\n        <Paper elevation={5}>\r\n          <Grid>\r\n            <Grid\r\n              item\r\n              sx={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <Grid\r\n                item\r\n                sx={{ display: \"flex\", justifyContent: \"center\", m: 2.5 }}\r\n              >\r\n                <h1>Update Posting</h1>\r\n              </Grid>\r\n              <TextField\r\n                sx={{ m: 2 }}\r\n                label=\"Title\"\r\n                name=\"title\"\r\n                placeholder=\"Title\"\r\n                onChange={handleUpdate}\r\n                defaultValue={props.posting.title ?? \" \"}\r\n              />\r\n              <TextField\r\n                select\r\n                sx={{ m: 2 }}\r\n                label=\"Condition\"\r\n                name=\"condition\"\r\n                placeholder=\"Condition\"\r\n                onChange={handleUpdate}\r\n                defaultValue={props.posting.condition ?? \" \"}\r\n              >\r\n                {dataList.condition.map((condition) => (\r\n                  <MenuItem key={condition} value={condition}>\r\n                    {condition}\r\n                  </MenuItem>\r\n                ))}\r\n              </TextField>\r\n              <TextField\r\n                select\r\n                sx={{ m: 2 }}\r\n                label=\"Category\"\r\n                name=\"category\"\r\n                placeholder=\"Category\"\r\n                onChange={handleUpdate}\r\n                defaultValue={props.posting.category ?? \" \"}\r\n              >\r\n                {dataList.category.map((category) => (\r\n                  <MenuItem key={category} value={category}>\r\n                    {category}\r\n                  </MenuItem>\r\n                ))}\r\n              </TextField>\r\n              {(function () {\r\n                if (updatedPosting.category === \"Console\") {\r\n                  return (\r\n                    <Box sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                      <TextField\r\n                        select\r\n                        sx={{ m: 2 }}\r\n                        label=\"Platform\"\r\n                        name=\"platform\"\r\n                        placeholder=\"Platform\"\r\n                        onChange={handleUpdate}\r\n                        defaultValue={props.posting.platform ?? \" \"}\r\n                      >\r\n                        {dataList.platform.map((platform) => (\r\n                          <MenuItem key={platform} value={platform}>\r\n                            {platform}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                      <TextField\r\n                        select\r\n                        sx={{ m: 2 }}\r\n                        label=\"Publisher\"\r\n                        name=\"publisher\"\r\n                        placeholder=\"Publisher\"\r\n                        onChange={handleUpdate}\r\n                        defaultValue={props.posting.publisher ?? \" \"}\r\n                      >\r\n                        {dataList.publisher.map((publisher) => (\r\n                          <MenuItem key={publisher} value={publisher}>\r\n                            {publisher}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                    </Box>\r\n                  );\r\n                }\r\n                if (updatedPosting.category === \"Games\") {\r\n                  return (\r\n                    <Box sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                      <TextField\r\n                        select\r\n                        sx={{ m: 2 }}\r\n                        label=\"Platform\"\r\n                        name=\"platform\"\r\n                        placeholder=\"Platform\"\r\n                        onChange={handleUpdate}\r\n                        defaultValue={props.posting.platform ?? \" \"}\r\n                      >\r\n                        {dataList.platform.map((platform) => (\r\n                          <MenuItem key={platform} value={platform}>\r\n                            {platform}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                      <TextField\r\n                        select\r\n                        sx={{ m: 2 }}\r\n                        label=\"Publisher\"\r\n                        name=\"publisher\"\r\n                        placeholder=\"Publisher\"\r\n                        onChange={handleUpdate}\r\n                        defaultValue={props.posting.publisher ?? \" \"}\r\n                      >\r\n                        {dataList.publisher.map((publisher) => (\r\n                          <MenuItem key={publisher} value={publisher}>\r\n                            {publisher}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                      <TextField\r\n                        select\r\n                        sx={{ m: 2 }}\r\n                        label=\"Genre\"\r\n                        name=\"genre\"\r\n                        placeholder=\"Genre\"\r\n                        onChange={handleUpdate}\r\n                        defaultValue={props.posting.genre ?? \" \"}\r\n                      >\r\n                        {dataList.genre.map((genre) => (\r\n                          <MenuItem key={genre} value={genre}>\r\n                            {genre}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                    </Box>\r\n                  );\r\n                }\r\n                if (updatedPosting.category === \"Accessories\") {\r\n                  return (\r\n                    <Box sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                      <TextField\r\n                        select\r\n                        sx={{ m: 2 }}\r\n                        label=\"Platform\"\r\n                        name=\"platform\"\r\n                        placeholder=\"Platform\"\r\n                        onChange={handleUpdate}\r\n                        defaultValue={props.posting.platform ?? \" \"}\r\n                      >\r\n                        {dataList.platform.map((platform) => (\r\n                          <MenuItem key={platform} value={platform}>\r\n                            {platform}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                      <TextField\r\n                        select\r\n                        sx={{ m: 2 }}\r\n                        label=\"Accessories\"\r\n                        name=\"accessories\"\r\n                        placeholder=\"Accessories\"\r\n                        onChange={handleUpdate}\r\n                        defaultValue={props.posting.accessories ?? \" \"}\r\n                      >\r\n                        {dataList.accessories.map((accessories) => (\r\n                          <MenuItem key={accessories} value={accessories}>\r\n                            {accessories}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                      <TextField\r\n                        select\r\n                        sx={{ m: 2 }}\r\n                        label=\"First of Third Party\"\r\n                        name=\"accessoryCheck\"\r\n                        placeholder=\"Third/First Party\"\r\n                        onChange={handleUpdate}\r\n                        defaultValue={props.posting.accessoryCheck ?? \" \"}\r\n                      >\r\n                        {dataList.officialCheck.map((officialCheck) => (\r\n                          <MenuItem key={officialCheck} value={officialCheck}>\r\n                            {officialCheck}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                    </Box>\r\n                  );\r\n                }\r\n                if (updatedPosting.category === \"Trading Card Game\") {\r\n                  return (\r\n                    <Box sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                      <TextField\r\n                        select\r\n                        sx={{ m: 2 }}\r\n                        label=\"Which Card Game?\"\r\n                        name=\"cardGame\"\r\n                        placeholder=\"Card Game\"\r\n                        onChange={handleUpdate}\r\n                        defaultValue={props.posting.cardGame ?? \" \"}\r\n                      >\r\n                        {dataList.cardGames.map((cardGames) => (\r\n                          <MenuItem key={cardGames} value={cardGames}>\r\n                            {cardGames}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                      <TextField\r\n                        select\r\n                        sx={{ m: 2 }}\r\n                        label=\"Single, Booster or Boxed\"\r\n                        name=\"cardSale\"\r\n                        placeholder=\"Card Sale\"\r\n                        onChange={handleUpdate}\r\n                        defaultValue={props.posting.cardSale ?? \" \"}\r\n                      >\r\n                        {dataList.cardSale.map((cardSale) => (\r\n                          <MenuItem key={cardSale} value={cardSale}>\r\n                            {cardSale}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                      <TextField\r\n                        select\r\n                        sx={{ m: 2 }}\r\n                        label=\"Publisher\"\r\n                        name=\"publisher\"\r\n                        placeholder=\"Card Publisher\"\r\n                        onChange={handleUpdate}\r\n                        defaultValue={props.posting.publisher ?? \" \"}\r\n                      >\r\n                        {dataList.cardPublisher.map((cardPublisher) => (\r\n                          <MenuItem key={cardPublisher} value={cardPublisher}>\r\n                            {cardPublisher}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                    </Box>\r\n                  );\r\n                }\r\n                if (updatedPosting.category === \"Action Figures\") {\r\n                  return (\r\n                    <Box sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                      <TextField\r\n                        select\r\n                        sx={{ m: 2 }}\r\n                        label=\"Manufacture\"\r\n                        name=\"figureManufacture\"\r\n                        placeholder=\"Action Figure Manufacture\"\r\n                        onChange={handleUpdate}\r\n                        defaultValue={props.posting.figureManufacture ?? \" \"}\r\n                      >\r\n                        {dataList.AFMakers.map((AFMakers) => (\r\n                          <MenuItem key={AFMakers} value={AFMakers}>\r\n                            {AFMakers}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                    </Box>\r\n                  );\r\n                }\r\n                if (updatedPosting.category === \"Figurines\") {\r\n                  return (\r\n                    <Box sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                      <TextField\r\n                        select\r\n                        sx={{ m: 2 }}\r\n                        label=\"Manufacture\"\r\n                        name=\"figurineManufacture\"\r\n                        placeholder=\"Figurine Manufacture\"\r\n                        onChange={handleUpdate}\r\n                        defaultValue={props.posting.figurineManufacture ?? \" \"}\r\n                      >\r\n                        {dataList.figurineMaker.map((figurineMaker) => (\r\n                          <MenuItem key={figurineMaker} value={figurineMaker}>\r\n                            {figurineMaker}\r\n                          </MenuItem>\r\n                        ))}\r\n                      </TextField>\r\n                    </Box>\r\n                  );\r\n                }\r\n              })()}\r\n              <TextField\r\n                sx={{ m: 2 }}\r\n                multiline\r\n                rows={5}\r\n                label=\"Description\"\r\n                name=\"description\"\r\n                placeholder=\"Description\"\r\n                onChange={handleUpdate}\r\n                defaultValue={props.posting.description ?? \" \"}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item sx={{ display: \"flex\", flexDirection: \"column\", m: 1 }}>\r\n            <button onClick={confirmUpdate}>Update</button>\r\n          </Grid>\r\n        </Paper>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UpdateForm;\r\n","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\components\\PostForm\\index.js",["222"],"import React from \"react\";\r\nimport { useState } from \"react\";\r\n// import { Link } from 'react-router-dom';\r\n\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { ADD_POSTING } from \"../../utils/mutations\";\r\nimport { QUERY_POSTINGS } from \"../../utils/queries\";\r\nimport { QUERY_MYPROFILE } from \"../../utils/queries\";\r\n\r\n// Import Material UI components\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\n// import Auth from '../../utils/auth';\r\n\r\nimport Axios from \"axios\";\r\n// import { Image } from 'cloudinary-react';\r\n\r\nimport * as dataList from \"../../components/data\";\r\n\r\nconst PostForm = () => {\r\n  const [newPosting, setNewPosting] = useState({\r\n    title: \"N/A\",\r\n    category: \"N/A\",\r\n    platform: \"N/A\",\r\n    publisher: \"N/A\",\r\n    genre: \"N/A\",\r\n    condition: \"N/A\",\r\n    accessory: \"N/A\",\r\n    accessoryCheck: \"N/A\",\r\n    cardGame: \"N/A\",\r\n    cardSale: \"N/A\",\r\n    figurineManufacture: \"N/A\",\r\n    figureManufacture: \"N/A\",\r\n    description: \"N/A\",\r\n    imageid: \"N/A\",\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    setNewPosting({\r\n      // ...newPosting,\r\n      platform: \"N/A\",\r\n      publisher: \"N/A\",\r\n      genre: \"N/A\",\r\n      accessory: \"N/A\",\r\n      accessoryCheck: \"N/A\",\r\n      cardGame: \"N/A\",\r\n      cardSale: \"N/A\",\r\n      figurineManufacture: \"N/A\",\r\n      figureManufacture: \"N/A\",\r\n      description: \"N/A\",\r\n      imageid: \"N/A\",\r\n    });\r\n    setNewPosting({ ...newPosting, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  console.log(newPosting);\r\n\r\n  const [imageSelected, setImageSelected] = useState(\"\");\r\n\r\n  const uploadImage = (file) => {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    formData.append(\"upload_preset\", \"yun8815z\");\r\n\r\n    Axios.post(\r\n      \"https://api.cloudinary.com/v1_1/du119g90a/image/upload\",\r\n      formData\r\n    ).then((response) => {\r\n      console.log(\"response\");\r\n      console.log(response);\r\n      console.log(\"public ID\");\r\n      console.log(response.data.public_id);\r\n\r\n      setNewPosting((prevState) => ({\r\n        ...prevState,\r\n        imageid: response.data.public_id,\r\n      }));\r\n    });\r\n  };\r\n\r\n  const [addPosting] = useMutation(ADD_POSTING, {\r\n    update(cache, { data: { addPosting } }) {\r\n      try {\r\n        const { postings } = cache.readQuery({ query: QUERY_POSTINGS });\r\n\r\n        cache.writeQuery({\r\n          query: QUERY_POSTINGS,\r\n          data: { postings: [addPosting, ...postings] },\r\n        });\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n\r\n      const { myprofile } = cache.readQuery({ query: QUERY_MYPROFILE });\r\n      cache.writeQuery({\r\n        query: QUERY_MYPROFILE,\r\n        data: {\r\n          myprofile: {\r\n            ...myprofile,\r\n            postings: [...myprofile.postings, addPosting],\r\n          },\r\n        },\r\n      });\r\n    },\r\n  });\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const { data } = await addPosting({\r\n        variables: {\r\n          ...newPosting,\r\n          // postAuthor: Auth.getProfile.data.username,\r\n        },\r\n      });\r\n\r\n      setNewPosting(\"\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box item sx={{ display: \"flex\", flexDirection: \"row\" }}>\r\n      <Paper\r\n        elevation={5}\r\n        sx={{\r\n          width: \"40%\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignItems: \"center\",\r\n          m: \"15px\",\r\n          ml: \"45px\",\r\n          height: \"1110px\",\r\n        }}\r\n        style={{ fontFamily: \"Roboto Condensed\" }}\r\n      >\r\n        <Grid item sx={{ mt: \"25px\", mb: \"25px\" }}>\r\n          <h1>New Posting</h1>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          sx={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <TextField\r\n            sx={{ m: 2 }}\r\n            label=\"Title\"\r\n            name=\"title\"\r\n            placeholder=\"Title\"\r\n            onChange={handleChange}\r\n            size=\"large\"\r\n          />\r\n          <TextField\r\n            select\r\n            sx={{ m: 2 }}\r\n            label=\"Category\"\r\n            name=\"category\"\r\n            placeholder=\"Category\"\r\n            onChange={handleChange}\r\n            size=\"large\"\r\n          >\r\n            {dataList.category.map((category) => (\r\n              <MenuItem key={category} value={category}>\r\n                {category}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n          {(function () {\r\n            if (newPosting.category === \"Console\") {\r\n              return (\r\n                <Box item sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                  <TextField\r\n                    select\r\n                    sx={{ m: 2 }}\r\n                    label=\"Platform\"\r\n                    name=\"platform\"\r\n                    placeholder=\"Platform\"\r\n                    onChange={handleChange}\r\n                    size=\"large\"\r\n                  >\r\n                    {dataList.platform.map((platform) => (\r\n                      <MenuItem key={platform} value={platform}>\r\n                        {platform}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                  <TextField\r\n                    select\r\n                    sx={{ m: 2 }}\r\n                    label=\"Publisher\"\r\n                    name=\"publisher\"\r\n                    placeholder=\"Publisher\"\r\n                    onChange={handleChange}\r\n                    size=\"large\"\r\n                  >\r\n                    {dataList.publisher.map((publisher) => (\r\n                      <MenuItem key={publisher} value={publisher}>\r\n                        {publisher}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </Box>\r\n              );\r\n            }\r\n            if (newPosting.category === \"Games\") {\r\n              return (\r\n                <Box item sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                  <TextField\r\n                    select\r\n                    sx={{ m: 2 }}\r\n                    label=\"Platform\"\r\n                    name=\"platform\"\r\n                    placeholder=\"Platform\"\r\n                    onChange={handleChange}\r\n                    size=\"large\"\r\n                  >\r\n                    {dataList.platform.map((platform) => (\r\n                      <MenuItem key={platform} value={platform}>\r\n                        {platform}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                  <TextField\r\n                    select\r\n                    sx={{ m: 2 }}\r\n                    label=\"Publisher\"\r\n                    name=\"publisher\"\r\n                    placeholder=\"Publisher\"\r\n                    onChange={handleChange}\r\n                    size=\"large\"\r\n                  >\r\n                    {dataList.publisher.map((publisher) => (\r\n                      <MenuItem key={publisher} value={publisher}>\r\n                        {publisher}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                  <TextField\r\n                    select\r\n                    sx={{ m: 2 }}\r\n                    label=\"Genre\"\r\n                    name=\"genre\"\r\n                    placeholder=\"Genre\"\r\n                    onChange={handleChange}\r\n                    size=\"large\"\r\n                  >\r\n                    {dataList.genre.map((genre) => (\r\n                      <MenuItem key={genre} value={genre}>\r\n                        {genre}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </Box>\r\n              );\r\n            }\r\n            if (newPosting.category === \"Accessories\") {\r\n              return (\r\n                <Box item sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                  <TextField\r\n                    select\r\n                    sx={{ m: 2 }}\r\n                    label=\"Platform\"\r\n                    name=\"platform\"\r\n                    placeholder=\"Platform\"\r\n                    onChange={handleChange}\r\n                    size=\"large\"\r\n                  >\r\n                    {dataList.platform.map((platform) => (\r\n                      <MenuItem key={platform} value={platform}>\r\n                        {platform}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                  <TextField\r\n                    select\r\n                    sx={{ m: 2 }}\r\n                    label=\"Accessory\"\r\n                    name=\"accessory\"\r\n                    placeholder=\"Accessory\"\r\n                    onChange={handleChange}\r\n                    size=\"large\"\r\n                  >\r\n                    {dataList.accessories.map((accessories) => (\r\n                      <MenuItem key={accessories} value={accessories}>\r\n                        {accessories}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                  <TextField\r\n                    select\r\n                    sx={{ m: 2 }}\r\n                    label=\"First or Third Party\"\r\n                    name=\"accessoryCheck\"\r\n                    placeholder=\"Third/First Party\"\r\n                    onChange={handleChange}\r\n                    size=\"large\"\r\n                  >\r\n                    {dataList.officialCheck.map((officialCheck) => (\r\n                      <MenuItem key={officialCheck} value={officialCheck}>\r\n                        {officialCheck}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </Box>\r\n              );\r\n            }\r\n            if (newPosting.category === \"Trading Card Game\") {\r\n              return (\r\n                <Box item sx={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                  <TextField\r\n                    select\r\n                    sx={{ m: 2 }}\r\n                    label=\"Which Card Game?\"\r\n                    name=\"cardGame\"\r\n                    placeholder=\"Card Game\"\r\n                    onChange={handleChange}\r\n                    size=\"large\"\r\n                  >\r\n                    {dataList.cardGames.map((cardGames) => (\r\n                      <MenuItem key={cardGames} value={cardGames}>\r\n                        {cardGames}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                  <TextField\r\n                    select\r\n                    sx={{ m: 2 }}\r\n                    label=\"Single, Booster or Boxed\"\r\n                    name=\"cardSale\"\r\n                    placeholder=\"Card Sale\"\r\n                    onChange={handleChange}\r\n                    size=\"large\"\r\n                  >\r\n                    {dataList.cardSale.map((cardSale) => (\r\n                      <MenuItem key={cardSale} value={cardSale}>\r\n                        {cardSale}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                  <TextField\r\n                    select\r\n                    sx={{ m: 2 }}\r\n                    label=\"Publisher\"\r\n                    name=\"publisher\"\r\n                    placeholder=\"Card Publisher\"\r\n                    onChange={handleChange}\r\n                    size=\"large\"\r\n                  >\r\n                    {dataList.cardPublisher.map((cardPublisher) => (\r\n                      <MenuItem key={cardPublisher} value={cardPublisher}>\r\n                        {cardPublisher}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </TextField>\r\n                </Box>\r\n              );\r\n            }\r\n            if (newPosting.category === \"Action Figures\") {\r\n              return (\r\n                <TextField\r\n                  select\r\n                  sx={{ m: 2 }}\r\n                  label=\"Manufacture\"\r\n                  name=\"figureManufacture\"\r\n                  placeholder=\"Action Figure Manufacture\"\r\n                  onChange={handleChange}\r\n                  size=\"large\"\r\n                >\r\n                  {dataList.AFMakers.map((AFMakers) => (\r\n                    <MenuItem key={AFMakers} value={AFMakers}>\r\n                      {AFMakers}\r\n                    </MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              );\r\n            }\r\n            if (newPosting.category === \"Figurines\") {\r\n              return (\r\n                <TextField\r\n                  select\r\n                  sx={{ m: 2 }}\r\n                  label=\"Manufacture\"\r\n                  name=\"figurineManufacture\"\r\n                  placeholder=\"Figurine Manufacture\"\r\n                  onChange={handleChange}\r\n                  size=\"large\"\r\n                >\r\n                  {dataList.figurineMaker.map((figurineMaker) => (\r\n                    <MenuItem key={figurineMaker} value={figurineMaker}>\r\n                      {figurineMaker}\r\n                    </MenuItem>\r\n                  ))}\r\n                </TextField>\r\n              );\r\n            }\r\n          })()}\r\n          <TextField\r\n            select\r\n            sx={{ m: 2 }}\r\n            label=\"Condition\"\r\n            name=\"condition\"\r\n            placeholder=\"Condition\"\r\n            onChange={handleChange}\r\n            size=\"large\"\r\n          >\r\n            {dataList.condition.map((condition) => (\r\n              <MenuItem key={condition} value={condition}>\r\n                {condition}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n          <TextField\r\n            multiline\r\n            sx={{ m: 2 }}\r\n            rows={8}\r\n            label=\"Description\"\r\n            name=\"description\"\r\n            placeholder=\"Description\"\r\n            onChange={handleChange}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item sx={{ mb: \"25px\", mt: \"25px\" }}>\r\n          <input\r\n            title=\" \"\r\n            type=\"file\"\r\n            onChange={(event) => {\r\n              uploadImage(event.target.files[0]);\r\n              setImageSelected(event.target.files[0]);\r\n            }}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item sx={{ mb: \"25px\", mt: \"25px\" }}>\r\n          <Button variant=\"contained\" onClick={handleSubmit} type=\"submit\">\r\n            Add Post\r\n          </Button>\r\n        </Grid>\r\n      </Paper>\r\n\r\n      <Paper\r\n        elevation={5}\r\n        sx={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"space-evenly\",\r\n          alignItems: \"center\",\r\n          width: \"60%\",\r\n          m: \"15px\",\r\n          mr: \"40px\",\r\n          mb: \"30px\",\r\n          height: \"1110px\",\r\n        }}\r\n        style={{ fontFamily: \"Roboto Condensed\" }}\r\n      >\r\n        <Grid item sx={{ mt: \"30px\", mb: \"50px\" }}>\r\n          <h2>Listing Preview</h2>\r\n        </Grid>\r\n\r\n        <Grid item sx={{ mb: \"25px\" }}>\r\n          {imageSelected ? (\r\n            <Grid item sx={{ width: \"250px\", height: \"250px\" }}>\r\n              <img\r\n                src={URL.createObjectURL(imageSelected)}\r\n                width=\"100%\"\r\n                alt=\"postingImage\"\r\n              ></img>\r\n            </Grid>\r\n          ) : (\r\n            <Grid\r\n              item\r\n              sx={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                borderStyle: \"dotted\",\r\n                width: \"250px\",\r\n                height: \"250px\",\r\n              }}\r\n            >\r\n              <h1>No Image</h1>\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n\r\n        <Grid item sx={{ mb: \"25px\" }}>\r\n          <h2>General Info</h2>\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          sx={{\r\n            display: \"flex\",\r\n            width: \"90%\",\r\n            background: \"rgb(128,128,128, 0.15)\",\r\n            p: \"20px\",\r\n            borderRadius: \"15px\",\r\n            mb: \"30px\",\r\n          }}\r\n        >\r\n          <Grid item sx={{ mr: \"120px\" }}>\r\n            {/* GENERAL INFO ALL POSTINGS SHOULD HAVE */}\r\n            <h3>Title: {newPosting.title}</h3>\r\n            <h3>Category: {newPosting.category}</h3>\r\n            <h3>Condition: {newPosting.condition}</h3>\r\n            <h3>Publisher: {newPosting.publisher}</h3>\r\n          </Grid>\r\n\r\n          <Grid>\r\n            {/* CONSOLES AND GAMES */}\r\n            <h3>Platform: {newPosting.platform}</h3>\r\n            <h3>Genre: {newPosting.genre}</h3>\r\n            {/* FOR ACCESSORIES */}\r\n            <h3>Accessory: {newPosting.accessory}</h3>\r\n            <h3>Accessory Check: {newPosting.accessoryCheck}</h3>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          sx={{\r\n            display: \"flex\",\r\n            width: \"90%\",\r\n            background: \"rgb(128,128,128, 0.15)\",\r\n            p: \"20px\",\r\n            borderRadius: \"15px\",\r\n            mb: \"30px\",\r\n          }}\r\n        >\r\n          <Grid item sx={{ mr: \"120px\" }}>\r\n            {/* CARD GAMES */}\r\n            <h3>Card Sale: {newPosting.cardSale}</h3>\r\n            <h3>Card Game: {newPosting.cardGame}</h3>\r\n          </Grid>\r\n          <Grid>\r\n            {/* ACTION FIGURES AND FIGURINES */}\r\n            <h3>Figure Manufacture: {newPosting.figureManufacture}</h3>\r\n            <h3>Figurine Manufacture: {newPosting.figurineManufacture}</h3>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          sx={{\r\n            width: \"90%\",\r\n            background: \"rgb(128,128,128, 0.15)\",\r\n            p: \"20px\",\r\n            borderRadius: \"15px\",\r\n            height: \"225px\",\r\n          }}\r\n        >\r\n          <h3>Description: {newPosting.description}</h3>\r\n        </Grid>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\components\\data.js",["223","224","225","226","227","228","229","230","231","232","233","234"],"export {\r\n  category,\r\n  condition,\r\n  platform,\r\n  publisher,\r\n  genre,\r\n  accessories,\r\n  officialCheck,\r\n  cardGames,\r\n  cardSale,\r\n  cardPublisher,\r\n  AFMakers,\r\n  figurineMaker,\r\n};\r\n\r\nlet category = [\r\n  \"Console\",\r\n  \"Games\",\r\n  \"Accessories\",\r\n  \"Action Figures\",\r\n  \"Trading Card Game\",\r\n  \"Board Game\",\r\n  \"Figurines\",\r\n  \"N/A\",\r\n];\r\nlet condition = [\"New\", \"Used\", \"Complete\", \"Loose\", \"Broken\", \"N/A\"];\r\n// THIS IS FOR GAMES AND CONSOLES\r\nlet platform = [\r\n  \"NES\",\r\n  \"SNES\",\r\n  \"N64\",\r\n  \"GameCube\",\r\n  \"Wii\",\r\n  \"Wii U\",\r\n  \"Switch\",\r\n  \"GameBoy/Color\",\r\n  \"GameBoy Advance\",\r\n  \"Nintendo DS\",\r\n  \"Nintendo 3DS\",\r\n  \"PS1\",\r\n  \"PS2\",\r\n  \"PS3\",\r\n  \"PS4\",\r\n  \"PS5\",\r\n  \"PSP\",\r\n  \"PSVita\",\r\n  \"Xbox\",\r\n  \"Xbox 360\",\r\n  \"Xbox One\",\r\n  \"Xbox Series\",\r\n  \"Genesis\",\r\n  \"Game Gear\",\r\n  \"Sega CD\",\r\n  \"32X\",\r\n  \"Sega Saturn\",\r\n  \"DreamCast\",\r\n  \"N/A\",\r\n];\r\nlet publisher = [\r\n  \"Nintendo\",\r\n  \"Microsoft\",\r\n  \"Sony\",\r\n  \"Bandai Namco\",\r\n  \"Ubisoft\",\r\n  \"EA Games\",\r\n  \"Square Enix\",\r\n  \"Konami\",\r\n  \"Sega\",\r\n  \"Capcom\",\r\n  \"Rare\",\r\n  \"N/A\",\r\n];\r\nlet genre = [\r\n  \"Platform\",\r\n  \"FPS\",\r\n  \"Survival Horror\",\r\n  \"Metroidvania\",\r\n  \"Visual Novels\",\r\n  \"Action RPG\",\r\n  \"RougeLikes\",\r\n  \"JRPG\",\r\n  \"Simulation\",\r\n  \"Fighting\",\r\n  \"Party\",\r\n  \"Turn-Based Strategy\",\r\n  \"Real-Time Strategy\",\r\n  \"Racing\",\r\n  \"Sports\",\r\n  \"Open World\",\r\n  \"Horror\",\r\n  \"N/A\",\r\n];\r\n// THESE ARE FOR ACCESSORIES\r\nlet accessories = [\r\n  \"Game Controller\",\r\n  \"Memory Cards\",\r\n  \"Audio/Video Cable\",\r\n  \"Console Cases\",\r\n  \"CD Cases\",\r\n  \"Cartridge Cases\",\r\n  \"Add-Ons/Peripherals\",\r\n  \"N/A\",\r\n];\r\nlet officialCheck = [\"First Party\", \"Third Party\", \"Custom\"];\r\n// THESE ARE FOR TRADING CARD GAMES\r\nlet cardGames = [\r\n  \"Magic: The Gathering\",\r\n  \"Pokemon Trading Card Game\",\r\n  \"Yu-Gi-Oh! Trading Card Game\",\r\n  \"Dungeons and Dragons Icons of the Realms\",\r\n  \"Cardfight!! Vanguard\",\r\n  \"Dragon Ball Super\",\r\n  \"Final Fantasy Trading Card Game\",\r\n  \"Weiss Schwarz\",\r\n  \"Transformers TCG\",\r\n  \"Star Wars Destiny\",\r\n  \"Ashes: Rise of the Phoenixborn\",\r\n  \"Game of Thrones: The Card Game\",\r\n  \"N/A\",\r\n];\r\nlet cardSale = [\r\n  \"Single Card\",\r\n  \"Single Booster Pack\",\r\n  \"Boxed Booster Pack\",\r\n  \"Boxed Set\",\r\n  \"Custom Collection\",\r\n  \"N/A\",\r\n];\r\nlet cardPublisher = [\r\n  \"Wizards of the Coast\",\r\n  \"Pokemong USA\",\r\n  \"Konami\",\r\n  \"Score Entertainment\",\r\n  \"Mattel\",\r\n  \"Bushiroad\",\r\n  \"Bandai Namco\",\r\n  \"Square Enix\",\r\n  \"Hasbro\",\r\n  \"Fantasy Flight Games\",\r\n  \"Plaid Hat Games\",\r\n  \"N/A\",\r\n];\r\n// THESE ARE COMMON ACTION FIGURE MAKERS\r\nlet AFMakers = [\r\n  \"Hasbro\",\r\n  \"Mattel\",\r\n  \"Bandai Spirits\",\r\n  \"McFarlane Toys\",\r\n  \"NECA\",\r\n  \"Hot Toys\",\r\n  \"DC Multiverse\",\r\n  \"Diamond Select Toys\",\r\n  \"Play Arts Kai\",\r\n  \"POP!\",\r\n  \"N/A\",\r\n];\r\n// THESE ARE COMMON FIGURINE MAKERS MOSTLY ARE GEARED TOWARD ANIME\r\nlet figurineMaker = [\r\n  \"Good Smile Company\",\r\n  \"Megahouse\",\r\n  \"Kotobukiya\",\r\n  \"Max Factory\",\r\n  \"Alter\",\r\n  \"BanPresto\",\r\n  \"Orange Rouge\",\r\n  \"Stronger\",\r\n  \"Aniplex\",\r\n  \"Bandai Namco Arts\",\r\n  \"N/A\",\r\n];\r\n","C:\\Users\\Justin\\Desktop\\Coding\\RetroRocketMarket\\client\\src\\components\\Footer\\index.js",[],{"ruleId":"235","replacedBy":"236"},{"ruleId":"237","replacedBy":"238"},{"ruleId":"235","replacedBy":"239"},{"ruleId":"237","replacedBy":"240"},{"ruleId":"241","severity":1,"message":"242","line":27,"column":21,"nodeType":"243","messageId":"244","endLine":27,"endColumn":25},{"ruleId":"241","severity":1,"message":"245","line":40,"column":25,"nodeType":"243","messageId":"244","endLine":40,"endColumn":30},{"ruleId":"235","replacedBy":"246"},{"ruleId":"237","replacedBy":"247"},{"ruleId":"241","severity":1,"message":"248","line":11,"column":8,"nodeType":"243","messageId":"244","endLine":11,"endColumn":12},{"ruleId":"241","severity":1,"message":"249","line":5,"column":10,"nodeType":"243","messageId":"244","endLine":5,"endColumn":14},{"ruleId":"241","severity":1,"message":"250","line":8,"column":10,"nodeType":"243","messageId":"244","endLine":8,"endColumn":21},{"ruleId":"241","severity":1,"message":"251","line":10,"column":10,"nodeType":"243","messageId":"244","endLine":10,"endColumn":24},{"ruleId":"241","severity":1,"message":"252","line":29,"column":11,"nodeType":"243","messageId":"244","endLine":29,"endColumn":18},{"ruleId":"253","severity":1,"message":"254","line":47,"column":6,"nodeType":"255","endLine":47,"endColumn":19,"suggestions":"256"},{"ruleId":"241","severity":1,"message":"252","line":31,"column":11,"nodeType":"243","messageId":"244","endLine":31,"endColumn":18},{"ruleId":"241","severity":1,"message":"257","line":40,"column":10,"nodeType":"243","messageId":"244","endLine":40,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":49,"column":6,"nodeType":"255","endLine":49,"endColumn":23,"suggestions":"258"},{"ruleId":"241","severity":1,"message":"245","line":21,"column":21,"nodeType":"243","messageId":"244","endLine":21,"endColumn":26},{"ruleId":"241","severity":1,"message":"259","line":26,"column":14,"nodeType":"243","messageId":"244","endLine":26,"endColumn":25},{"ruleId":"241","severity":1,"message":"260","line":27,"column":12,"nodeType":"243","messageId":"244","endLine":27,"endColumn":21},{"ruleId":"253","severity":1,"message":"261","line":31,"column":9,"nodeType":"262","endLine":31,"endColumn":38},{"ruleId":"241","severity":1,"message":"252","line":33,"column":11,"nodeType":"243","messageId":"244","endLine":33,"endColumn":18},{"ruleId":"241","severity":1,"message":"249","line":4,"column":10,"nodeType":"243","messageId":"244","endLine":4,"endColumn":14},{"ruleId":"241","severity":1,"message":"242","line":116,"column":15,"nodeType":"243","messageId":"244","endLine":116,"endColumn":19},{"ruleId":"263","severity":1,"message":"264","line":2,"column":3,"nodeType":"243","messageId":"265","endLine":2,"endColumn":11},{"ruleId":"263","severity":1,"message":"266","line":3,"column":3,"nodeType":"243","messageId":"265","endLine":3,"endColumn":12},{"ruleId":"263","severity":1,"message":"267","line":4,"column":3,"nodeType":"243","messageId":"265","endLine":4,"endColumn":11},{"ruleId":"263","severity":1,"message":"268","line":5,"column":3,"nodeType":"243","messageId":"265","endLine":5,"endColumn":12},{"ruleId":"263","severity":1,"message":"269","line":6,"column":3,"nodeType":"243","messageId":"265","endLine":6,"endColumn":8},{"ruleId":"263","severity":1,"message":"270","line":7,"column":3,"nodeType":"243","messageId":"265","endLine":7,"endColumn":14},{"ruleId":"263","severity":1,"message":"271","line":8,"column":3,"nodeType":"243","messageId":"265","endLine":8,"endColumn":16},{"ruleId":"263","severity":1,"message":"272","line":9,"column":3,"nodeType":"243","messageId":"265","endLine":9,"endColumn":12},{"ruleId":"263","severity":1,"message":"273","line":10,"column":3,"nodeType":"243","messageId":"265","endLine":10,"endColumn":11},{"ruleId":"263","severity":1,"message":"274","line":11,"column":3,"nodeType":"243","messageId":"265","endLine":11,"endColumn":16},{"ruleId":"263","severity":1,"message":"275","line":12,"column":3,"nodeType":"243","messageId":"265","endLine":12,"endColumn":11},{"ruleId":"263","severity":1,"message":"276","line":13,"column":3,"nodeType":"243","messageId":"265","endLine":13,"endColumn":16},"no-native-reassign",["277"],"no-negated-in-lhs",["278"],["277"],["278"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'error' is assigned a value but never used.",["277"],["278"],"'Home' is defined but never used.","'Link' is defined but never used.","'useMutation' is defined but never used.","'REMOVE_POSTING' is defined but never used.","'loading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'max' and 'min'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPostings' needs the current value of 'min'.","ArrayExpression",["279"],"'isLoading' is assigned a value but never used.",["280"],"'postLoading' is assigned a value but never used.","'postError' is assigned a value but never used.","The 'posting' logical expression could make the dependencies of useEffect Hook (at line 95) change on every render. To fix this, wrap the initialization of 'posting' in its own useMemo() Hook.","VariableDeclarator","no-use-before-define","'category' was used before it was defined.","usedBeforeDefined","'condition' was used before it was defined.","'platform' was used before it was defined.","'publisher' was used before it was defined.","'genre' was used before it was defined.","'accessories' was used before it was defined.","'officialCheck' was used before it was defined.","'cardGames' was used before it was defined.","'cardSale' was used before it was defined.","'cardPublisher' was used before it was defined.","'AFMakers' was used before it was defined.","'figurineMaker' was used before it was defined.","no-global-assign","no-unsafe-negation",{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},"Update the dependencies array to be: [allPostings, max, min]",{"range":"285","text":"286"},"Update the dependencies array to be: [allUserPostings, max, min]",{"range":"287","text":"288"},[1664,1677],"[allPostings, max, min]",[1614,1631],"[allUserPostings, max, min]"]